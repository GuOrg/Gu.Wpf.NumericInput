<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Gu.Wpf.NumericInput"
                    >
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Geometry x:Key="UpGeometry">F1 M 24,21.25L 34,31.25L 34,24.5L 24,14L 14,24.5L 14,31.25L 24,21.25 Z</Geometry>
    <Geometry x:Key="DownGeometry">F1 M 24,26.75L 14,16.75L 14,23.5L 24,34L 34,23.5L 34,16.75L 24,26.75 Z</Geometry>

    <Style x:Key="ArrowStyle"
           TargetType="{x:Type Path}"
           >
        <!--  <Setter Property="Height" Value="5" />  -->
        <!--<Setter Property="Width" Value="16" />-->
        <Setter Property="Stretch" Value="Uniform" />
        <Setter Property="Fill" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType=RepeatButton}}" />
    </Style>

    <Style x:Key="_TextBoxStyle"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type TextBox}"
           >
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="local:NumericBox.SelectAllOnDoubleClick" Value="True" />
        <Setter Property="MaxLines" Value="1" />
        <Setter Property="MinLines" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="AcceptsReturn" Value="{Binding AcceptsReturn, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="AcceptsTab" Value="{Binding AcceptsTab, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="AutoWordSelection" Value="{Binding AutoWordSelection, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="CaretBrush" Value="{Binding CaretBrush, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="CharacterCasing" Value="{Binding CharacterCasing, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontFamily" Value="{Binding FontFamily, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontStretch" Value="{Binding FontStretch, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontStyle" Value="{Binding FontStyle, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontWeight" Value="{Binding FontWeight, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsInactiveSelectionHighlightEnabled" Value="{Binding IsInactiveSelectionHighlightEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsReadOnly" Value="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsReadOnlyCaretVisible" Value="{Binding IsReadOnlyCaretVisible, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsTabStop" Value="{Binding IsTabStop, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsUndoEnabled" Value="{Binding IsUndoEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="MaxLength" Value="{Binding MaxLength, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="SelectionBrush" Value="{Binding SelectionBrush, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="SelectionOpacity" Value="{Binding SelectionOpacity, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TabIndex" Value="{Binding TabIndex, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TextAlignment" Value="{Binding TextAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TextDecorations" Value="{Binding TextDecorations, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="UndoLimit" Value="{Binding UndoLimit, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
    </Style>

    <Style x:Key="_SuffixStyle"
           BasedOn="{StaticResource _TextBoxStyle}"
           TargetType="{x:Type TextBox}"
           >
        <Setter Property="local:NumericBox.SelectAllOnDoubleClick" Value="False" />
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Suffix,
                                           RelativeSource={RelativeSource TemplatedParent}}"
                         Value="{x:Null}"
                         >
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="ValidationErrorListTemplate">
        <DockPanel SnapsToDevicePixels="True">
            <ListBox Background="{x:Null}"
                     BorderThickness="0"
                     DockPanel.Dock="Right"
                     ItemsSource="{Binding ElementName=ErrorAdorner,
                                           Path=AdornedElement.(Validation.Errors)}"
                     >
                <ListBox.ItemTemplate>
                    <DataTemplate DataType="{x:Type ValidationError}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Grid Width="12"
                                  Height="12"
                                  VerticalAlignment="Center"
                                  >
                                <Ellipse Width="12"
                                         Height="12"
                                         HorizontalAlignment="Center"
                                         VerticalAlignment="Center"
                                         Fill="Red"
                                         SnapsToDevicePixels="True"
                                         />
                                <TextBlock HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           FontSize="8"
                                           FontWeight="Heavy"
                                           Foreground="White"
                                           SnapsToDevicePixels="True"
                                           Text="X"
                                           TextAlignment="Center"
                                           ToolTip="{Binding ErrorContent}"
                                           />
                            </Grid>
                            <TextBlock Grid.Column="1"
                                       Margin="2,0,0,0"
                                       VerticalAlignment="Center"
                                       FontWeight="12"
                                       Foreground="Red"
                                       SnapsToDevicePixels="True"
                                       Text="{Binding ErrorContent}"
                                       />
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
            <Border BorderBrush="Red"
                    BorderThickness="1"
                    >
                <AdornedElementPlaceholder x:Name="ErrorAdorner" />
            </Border>
        </DockPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="SimpleValidationErrorTemplate">
        <Grid SnapsToDevicePixels="True">
            <Border Width="16"
                    Height="16"
                    HorizontalAlignment="Left"
                    VerticalAlignment="Top"
                    Background="Transparent"
                    Padding="2"
                    >
                <Grid>
                    <Ellipse Width="12"
                             Height="12"
                             HorizontalAlignment="Center"
                             VerticalAlignment="Center"
                             Fill="Red"
                             SnapsToDevicePixels="True"
                             />
                    <TextBlock HorizontalAlignment="Center"
                               VerticalAlignment="Center"
                               FontSize="8"
                               FontWeight="Heavy"
                               Foreground="White"
                               SnapsToDevicePixels="True"
                               Text="X"
                               TextAlignment="Center"
                               />
                </Grid>
            </Border>
            <AdornedElementPlaceholder x:Name="ErrorAdorner" />
        </Grid>
    </ControlTemplate>

    <!--  BaseUpDown  -->
    <Style x:Key="BaseUpDownStyle"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type local:BaseBox}"
           >
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="FocusManager.IsFocusScope" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="AcceptsReturn" Value="False" />
        <Setter Property="AcceptsTab" Value="False" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="MinLines" Value="1" />
        <Setter Property="MaxLines" Value="1" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="AutoWordSelection" Value="True" />
        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationErrorListTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:BaseBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                            Padding="{TemplateBinding Padding}"
                            >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <TextBox x:Name="TextBox"
                                     Grid.Column="0"
                                     Style="{StaticResource _TextBoxStyle}"
                                     Text="{Binding Text,
                                                    RelativeSource={RelativeSource TemplatedParent},
                                                    UpdateSourceTrigger=PropertyChanged}"
                                     >
                                <!--  Text must be bound with UpdateSourceTrigger=PropertyChanged in template for realtime validation  -->
                                <!--
                                    <TextBox.InputBindings>
                                    <KeyBinding Key="Up" Command="{Binding IncreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <KeyBinding Key="Down" Command="{Binding DecreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </TextBox.InputBindings>
                                -->
                            </TextBox>

                            <TextBox Grid.Column="1"
                                     Style="{StaticResource _SuffixStyle}"
                                     Text="{TemplateBinding Suffix}"
                                     />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="AllowSpinners" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:BaseBox}">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                                    Padding="{TemplateBinding Padding}"
                                    >
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <RepeatButton Grid.Column="0"
                                                  Margin="0"
                                                  VerticalAlignment="Stretch"
                                                  VerticalContentAlignment="Center"
                                                  Command="{TemplateBinding DecreaseCommand}"
                                                  CommandParameter="{Binding ElementName=TextBox}"
                                                  Content="-"
                                                  FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                                                  FontSize="{TemplateBinding FontSize}"
                                                  Padding="0"
                                                  />

                                    <TextBox x:Name="TextBox"
                                             Grid.Column="1"
                                             Style="{StaticResource _TextBoxStyle}"
                                             Text="{Binding Text,
                                                            RelativeSource={RelativeSource TemplatedParent},
                                                            UpdateSourceTrigger=PropertyChanged}"
                                             >
                                        <!--  Text must be bound with UpdateSourceTrigger=PropertyChanged in template for realtime validation  -->
                                        <!--
                                    <TextBox.InputBindings>
                                    <KeyBinding Key="Up" Command="{Binding IncreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <KeyBinding Key="Down" Command="{Binding DecreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </TextBox.InputBindings>
                                        -->
                                    </TextBox>

                                    <TextBox Grid.Column="2"
                                             Style="{StaticResource _SuffixStyle}"
                                             Text="{TemplateBinding Suffix}"
                                             />

                                    <RepeatButton Grid.Column="3"
                                                  Margin="0"
                                                  VerticalAlignment="Stretch"
                                                  VerticalContentAlignment="Center"
                                                  Command="{TemplateBinding IncreaseCommand}"
                                                  CommandParameter="{Binding ElementName=TextBox}"
                                                  Content="+"
                                                  FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                                                  FontSize="{TemplateBinding FontSize}"
                                                  Padding="0"
                                                  />

                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  DoubleBox  -->
    <Style BasedOn="{StaticResource BaseUpDownStyle}"
           TargetType="{x:Type local:DoubleBox}"
           />

    <!--  DecimalBox  -->
    <Style BasedOn="{StaticResource BaseUpDownStyle}"
           TargetType="{x:Type local:DecimalBox}"
           />

    <!--  FloatBox  -->
    <Style BasedOn="{StaticResource BaseUpDownStyle}"
           TargetType="{x:Type local:FloatBox}"
           />

    <!--  LongBox  -->
    <Style BasedOn="{StaticResource BaseUpDownStyle}"
           TargetType="{x:Type local:LongBox}"
           />

    <!--  IntBox  -->
    <Style BasedOn="{StaticResource BaseUpDownStyle}"
           TargetType="{x:Type local:IntBox}"
           />

    <!--  ShortBox  -->
    <Style BasedOn="{StaticResource BaseUpDownStyle}"
           TargetType="{x:Type local:ShortBox}"
           />

</ResourceDictionary>