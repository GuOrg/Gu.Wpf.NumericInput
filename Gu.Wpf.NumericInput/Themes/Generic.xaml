<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Gu.Wpf.NumericInput">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Gu.Wpf.NumericInput;component/Themes/Validation.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Gu.Wpf.NumericInput;component/Themes/Spinners.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Style x:Key="{x:Static local:NumericBox.TextBoxStyleKey}"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="local:NumericBox.SelectAllOnClick" Value="True" />
        <Setter Property="MaxLines" Value="1" />
        <Setter Property="MinLines" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="AcceptsReturn" Value="{Binding AcceptsReturn, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="AcceptsTab" Value="{Binding AcceptsTab, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="AutoWordSelection" Value="{Binding AutoWordSelection, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="CaretBrush" Value="{Binding CaretBrush, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="CharacterCasing" Value="{Binding CharacterCasing, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontFamily" Value="{Binding FontFamily, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontStretch" Value="{Binding FontStretch, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontStyle" Value="{Binding FontStyle, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="FontWeight" Value="{Binding FontWeight, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsInactiveSelectionHighlightEnabled" Value="{Binding IsInactiveSelectionHighlightEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsReadOnly" Value="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsReadOnlyCaretVisible" Value="{Binding IsReadOnlyCaretVisible, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsTabStop" Value="{Binding IsTabStop, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="IsUndoEnabled" Value="{Binding IsUndoEnabled, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="MaxLength" Value="{Binding MaxLength, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="SelectionBrush" Value="{Binding SelectionBrush, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="SelectionOpacity" Value="{Binding SelectionOpacity, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TabIndex" Value="{Binding TabIndex, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TextAlignment" Value="{Binding TextAlignment, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TextDecorations" Value="{Binding TextDecorations, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="UndoLimit" Value="{Binding UndoLimit, RelativeSource={RelativeSource AncestorType={x:Type local:BaseBox}}}" />
    </Style>

    <Style x:Key="{x:Static local:NumericBox.SuffixTextBoxStyleKey}"
           BasedOn="{StaticResource {x:Static local:NumericBox.TextBoxStyleKey}}"
           TargetType="{x:Type TextBox}">
        <!--<Setter Property="local:NumericBox.SelectAllOnDoubleClick" Value="False" />-->
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding Suffix, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <local:IsNullOrEmptyConverter x:Key="IsNullOrEmptyConverter" />

    <ControlTemplate x:Key="{x:Static local:NumericBox.WithSuffixTemplateKey}" TargetType="{x:Type local:BaseBox}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <TextBox x:Name="ValueBox"
                         Grid.Column="0"
                         Style="{DynamicResource {x:Static local:NumericBox.TextBoxStyleKey}}"
                         Text="{Binding Text,
                                        RelativeSource={RelativeSource TemplatedParent},
                                        UpdateSourceTrigger=PropertyChanged}">

                    <!--  Text must be bound with UpdateSourceTrigger=PropertyChanged in template for realtime validation  -->
                    <!--
                                    <TextBox.InputBindings>
                                    <KeyBinding Key="Up" Command="{Binding IncreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <KeyBinding Key="Down" Command="{Binding DecreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </TextBox.InputBindings>
                    -->

                </TextBox>

                <TextBox Grid.Column="1"
                         Style="{DynamicResource {x:Static local:NumericBox.SuffixTextBoxStyleKey}}"
                         Text="{TemplateBinding Suffix}" />
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static local:NumericBox.WithSpinnersAndSuffixTemplateKey}" TargetType="{x:Type local:BaseBox}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <RepeatButton Grid.Column="0"
                              Command="{TemplateBinding DecreaseCommand}"
                              CommandParameter="{Binding ElementName=TextBox}"
                              Content="-"
                              FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                              FontSize="{TemplateBinding FontSize}"
                              Style="{DynamicResource {x:Static local:NumericBox.SpinnerButtonStyleKey}}" />

                <TextBox x:Name="ValueBox"
                         Grid.Column="1"
                         Style="{DynamicResource {x:Static local:NumericBox.TextBoxStyleKey}}"
                         Text="{Binding Text,
                                        RelativeSource={RelativeSource TemplatedParent},
                                        UpdateSourceTrigger=PropertyChanged}">
                    <!--  Text must be bound with UpdateSourceTrigger=PropertyChanged in template for realtime validation  -->
                    <!--
                                    <TextBox.InputBindings>
                                    <KeyBinding Key="Up" Command="{Binding IncreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <KeyBinding Key="Down" Command="{Binding DecreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </TextBox.InputBindings>
                    -->
                </TextBox>

                <TextBox Grid.Column="2"
                         Style="{DynamicResource {x:Static local:NumericBox.SuffixTextBoxStyleKey}}"
                         Text="{TemplateBinding Suffix}" />

                <RepeatButton Grid.Column="3"
                              Command="{TemplateBinding IncreaseCommand}"
                              CommandParameter="{Binding ElementName=TextBox}"
                              Content="+"
                              FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                              FontSize="{TemplateBinding FontSize}"
                              Style="{DynamicResource {x:Static local:NumericBox.SpinnerButtonStyleKey}}" />

            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static local:NumericBox.WithSpinnersTemplateKey}" TargetType="{x:Type local:BaseBox}">
        <Border Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                Padding="{TemplateBinding Padding}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <RepeatButton Grid.Column="0"
                              Command="{TemplateBinding DecreaseCommand}"
                              CommandParameter="{Binding ElementName=TextBox}"
                              Content="-"
                              FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                              FontSize="{TemplateBinding FontSize}"
                              Style="{DynamicResource {x:Static local:NumericBox.SpinnerButtonStyleKey}}" />

                <TextBox x:Name="ValueBox"
                         Grid.Column="1"
                         Style="{DynamicResource {x:Static local:NumericBox.TextBoxStyleKey}}"
                         Text="{Binding Text,
                                        RelativeSource={RelativeSource TemplatedParent},
                                        UpdateSourceTrigger=PropertyChanged}">
                    <!--  Text must be bound with UpdateSourceTrigger=PropertyChanged in template for realtime validation  -->
                    <!--
                                    <TextBox.InputBindings>
                                    <KeyBinding Key="Up" Command="{Binding IncreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <KeyBinding Key="Down" Command="{Binding DecreaseCommand, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </TextBox.InputBindings>
                    -->
                </TextBox>

                <RepeatButton Grid.Column="2"
                              Command="{TemplateBinding IncreaseCommand}"
                              CommandParameter="{Binding ElementName=TextBox}"
                              Content="+"
                              FocusManager.FocusedElement="{Binding ElementName=TextBox}"
                              FontSize="{TemplateBinding FontSize}"
                              Style="{DynamicResource {x:Static local:NumericBox.SpinnerButtonStyleKey}}" />

            </Grid>
        </Border>
    </ControlTemplate>

    <!--  BaseUpDown  -->
    <Style x:Key="{x:Static local:NumericBox.BaseBoxStyleKey}"
           BasedOn="{StaticResource {x:Type TextBox}}"
           TargetType="{x:Type local:BaseBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="MinWidth" Value="20" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="AcceptsReturn" Value="False" />
        <Setter Property="AcceptsTab" Value="False" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled" />
        <Setter Property="VerticalScrollBarVisibility" Value="Disabled" />
        <Setter Property="MinLines" Value="1" />
        <Setter Property="MaxLines" Value="1" />
        <Setter Property="TextWrapping" Value="NoWrap" />
        <Setter Property="AutoWordSelection" Value="True" />

        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="AllowSpinners" Value="True" />
                    <Condition Property="HasSuffix" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="FocusManager.IsFocusScope" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template" Value="{DynamicResource {x:Static local:NumericBox.WithSpinnersAndSuffixTemplateKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="AllowSpinners" Value="True" />
                    <Condition Property="HasSuffix" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="FocusManager.IsFocusScope" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template" Value="{DynamicResource {x:Static local:NumericBox.WithSpinnersTemplateKey}}" />
            </MultiTrigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="AllowSpinners" Value="False" />
                    <Condition Property="HasSuffix" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="FocusManager.IsFocusScope" Value="True" />
                <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                <Setter Property="Template" Value="{DynamicResource {x:Static local:NumericBox.WithSuffixTemplateKey}}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!--  DoubleBox  -->
    <Style BasedOn="{StaticResource {x:Static local:NumericBox.BaseBoxStyleKey}}" TargetType="{x:Type local:DoubleBox}" />

    <!--  DecimalBox  -->
    <Style BasedOn="{StaticResource {x:Static local:NumericBox.BaseBoxStyleKey}}" TargetType="{x:Type local:DecimalBox}" />

    <!--  FloatBox  -->
    <Style BasedOn="{StaticResource {x:Static local:NumericBox.BaseBoxStyleKey}}" TargetType="{x:Type local:FloatBox}" />

    <!--  LongBox  -->
    <Style BasedOn="{StaticResource {x:Static local:NumericBox.BaseBoxStyleKey}}" TargetType="{x:Type local:LongBox}" />

    <!--  IntBox  -->
    <Style BasedOn="{StaticResource {x:Static local:NumericBox.BaseBoxStyleKey}}" TargetType="{x:Type local:IntBox}" />

    <!--  ShortBox  -->
    <Style BasedOn="{StaticResource {x:Static local:NumericBox.BaseBoxStyleKey}}" TargetType="{x:Type local:ShortBox}" />

</ResourceDictionary>